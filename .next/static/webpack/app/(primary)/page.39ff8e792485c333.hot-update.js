"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(primary)/page",{

/***/ "(app-pages-browser)/./src/utilities/dataUtils.ts":
/*!************************************!*\
  !*** ./src/utilities/dataUtils.ts ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchData: function() { return /* binding */ fetchData; },\n/* harmony export */   fetchDataAndMetrics: function() { return /* binding */ fetchDataAndMetrics; },\n/* harmony export */   generateInsights: function() { return /* binding */ generateInsights; },\n/* harmony export */   generateOpenAIPrompt: function() { return /* binding */ generateOpenAIPrompt; }\n/* harmony export */ });\n/* harmony import */ var _constants_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/constants/env */ \"(app-pages-browser)/./src/constants/env.ts\");\n/* harmony import */ var _firebaseClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./firebaseClient */ \"(app-pages-browser)/./src/utilities/firebaseClient.ts\");\n/* harmony import */ var _apiUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./apiUtils */ \"(app-pages-browser)/./src/utilities/apiUtils.ts\");\n\n\n\n// Function to fetch data for a specified cryptocurrency\nconst fetchData = async (address, cryptocurrency)=>{\n    switch(cryptocurrency.toLowerCase()){\n        case \"eth\":\n            return (0,_apiUtils__WEBPACK_IMPORTED_MODULE_2__.fetchEtherscanData)(address);\n        // case 'btc':  // Uncomment and implement if BTC support is added\n        //   return fetchBlockCypherData(address);\n        default:\n            console.error(\"Unsupported cryptocurrency\");\n            return null;\n    }\n};\n// Generate the OpenAI prompt for relationship analysis and recommendations\nconst generateOpenAIPrompt = (userAddress, transactions, status // Pass or Fail\n)=>{\n    // Default to an empty array if transactions is undefined\n    const limitedTransactions = (transactions || []).slice(0, 10); // Limit transactions to avoid token issues\n    const transactionDetails = limitedTransactions.map((txn, index)=>\"Transaction \".concat(index + 1, \" - \").concat(txn.type, \": \").concat(txn.usdAmount, \" USD involving \").concat(txn.thirdPartyWallet, \".\")).join(\"\\n\");\n    const prompt = \"\\n    Analyze the Ethereum address \".concat(userAddress, \" to identify patterns and relationships with other unique addresses found in the transaction details.\\n    Focus on mapping out transaction patterns and identifying potential malicious activities.\\n    Based on the status of FAIL OR PASS (\").concat(status, \"), provide recommendations for improving security and transaction practices.\\n    IF the status is FAIL, indicate to not transact or interact with the address.\\n    \").concat(transactionDetails, \"\\n  \");\n    console.log(\"Generated OpenAI Prompt:\", prompt);\n    return prompt;\n};\n// Function to generate insights using OpenAI\nconst generateInsights = async (userAddress, transactions, status // Pass or Fail\n)=>{\n    try {\n        // Ensure transactions is not undefined\n        const txns = transactions || [];\n        const openAIPrompt = generateOpenAIPrompt(userAddress, txns, status);\n        const payload = {\n            model: \"gpt-3.5-turbo\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"Provide insights and recommendations for Ethereum address \".concat(userAddress, \". Consider the security status of PASS or FAIL: \").concat(status)\n                },\n                {\n                    role: \"user\",\n                    content: openAIPrompt\n                }\n            ]\n        };\n        console.log(\"Request payload:\", payload);\n        const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: \"Bearer \".concat(_constants_env__WEBPACK_IMPORTED_MODULE_0__.openaiApiKey)\n            },\n            body: JSON.stringify(payload)\n        });\n        console.log(\"Response status:\", response.status);\n        const responseData = await response.json();\n        console.log(\"Response data:\", responseData);\n        if (responseData.choices && responseData.choices.length > 0) {\n            var _responseData_choices__message, _responseData_choices_;\n            const insightsText = (_responseData_choices_ = responseData.choices[0]) === null || _responseData_choices_ === void 0 ? void 0 : (_responseData_choices__message = _responseData_choices_.message) === null || _responseData_choices__message === void 0 ? void 0 : _responseData_choices__message.content;\n            console.log(\"Insights:\", insightsText);\n            if (insightsText !== undefined && insightsText !== null) {\n                await (0,_firebaseClient__WEBPACK_IMPORTED_MODULE_1__.storeJsonData)({\n                    insights: insightsText,\n                    timestamp: Date.now(),\n                    userAddress\n                });\n                return insightsText;\n            } else {\n                console.error(\"Insights text is undefined or null.\");\n                return null;\n            }\n        } else {\n            console.error(\"No insights available.\");\n            return null;\n        }\n    } catch (error) {\n        console.error(\"Error generating insights:\", error);\n        return null;\n    }\n};\n// Fetch data and metrics (not used if you directly call checkFlaggedAddress)\nconst fetchDataAndMetrics = async (address)=>{\n    try {\n        const response = await fetch(\"https://api.idef.ai/api/get_data_and_metrics?address=\".concat(address));\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error(\"Error fetching data and metrics:\", error);\n        return null;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utilities/dataUtils.ts\n"));

/***/ })

});